openapi: 3.1.0
info:
  title: BetterClassroom API
  description: BetterClassroom API documentation
  version: 1.0.0
servers:
  - url: http://betterclassroom.in.htwg-konstanz.de/api
    description: Production server
  - url: http://betterclassroom-staging.in.htwg-konstanz.de:8080/api
    description: Staging server
  - url: http://better-classroom.com:8088/api
    description: Local cluster
  - url: http://localhost:5000/api
    description: Local server
paths:
  /classroom:
    get:
      summary: Returns a list of all classrooms.
      tags:
        - Classroom
      responses:
        "200":
          description: A JSON array of classroom objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Classroom"
        "404":
          description: No classrooms found

  /classroom/{classroom_id}:
    get:
      summary: Returns a classroom by ID.
      tags:
        - Classroom
      parameters:
        - in: path
          name: classroom_id
          required: true
          description: ID of the classroom to return
          schema:
            type: string
      responses:
        "200":
          description: A JSON object of classroom
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Classroom"
        "404":
          description: Classroom not found

  /classroom/{classroom_id}/table/{table_id}/{seat_side}/occupied:
    get:
      summary: Checks if a specific seat in a classroom is occupied.
      tags:
        - Classroom
      parameters:
        - in: path
          name: classroom_id
          required: true
          description: ID of the classroom
          schema:
            type: string
        - in: path
          name: table_id
          required: true
          description: ID of the table
          schema:
            type: string
        - in: path
          name: seat_side
          required: true
          description: Side of the table (L for left, R for right)
          schema:
            type: string
            enum: [L, R]
      responses:
        "200":
          description: Seat occupation status
          content:
            application/json:
              schema:
                type: object
                properties:
                  occupied:
                    type: boolean
        "400":
          description: Invalid seat side provided
        "404":
          description: Classroom or table not found

  /classroom/{classroom_id}/table/{table_id}/{seat_side}:
    post:
      summary: Updates the occupation status of a specific seat in a classroom.
      tags:
        - Classroom
      parameters:
        - in: path
          name: classroom_id
          required: true
          description: ID of the classroom
          schema:
            type: string
        - in: path
          name: table_id
          required: true
          description: ID of the table
          schema:
            type: string
        - in: path
          name: seat_side
          required: true
          description: Side of the table (L for left, R for right)
          schema:
            type: string
            enum: [L, R]
      responses:
        "200":
          description: Seat successfully occupied
        "400":
          description: Invalid seat side provided or seat is already occupied
        "404":
          description: Classroom or table not found
  /professor:
    get:
      summary: Returns a list of all professors.
      tags:
        - Professor
      responses:
        "200":
          description: A JSON array of professor objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Professor"
    post:
      summary: Add a new professor.
      tags:
        - Professor
      requestBody:
        description: The professor to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Professor"
      responses:
        "201":
          description: Professor added successfully
        "400":
          description: Professor with that ID already exists

  /professor/login:
    post:
      summary: Log in a professor
      tags:
        - Professor
      requestBody:
        description: Professor's login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Professor"
        "401":
          description: Invalid credentials

  /professor/reset_password:
    post:
      summary: Reset a professor's password
      tags:
        - Professor
      requestBody:
        description: Professor's email and new password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                new_password:
                  type: string
              required:
                - email
                - new_password
      responses:
        "200":
          description: Password updated successfully
        "404":
          description: Professor not found

  /students:
    get:
      summary: Returns a list of all students.
      tags:
        - Student
      responses:
        "200":
          description: A JSON array of student objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Student"
    post:
      summary: Add a new student.
      tags:
        - Student
      requestBody:
        description: The student to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Student"
      responses:
        "201":
          description: Student added successfully
        "400":
          description: Student with this ID already exists
        "404":
          description: Course or Exercise not found
    delete:
      summary: Delete all students.
      tags:
        - Student
      responses:
        "200":
          description: All students deleted successfully

  /students/{student_id}:
    get:
      summary: Returns a student by ID.
      tags:
        - Student
      parameters:
        - in: path
          name: student_id
          required: true
          description: ID of the student to return
          schema:
            type: string
      responses:
        "200":
          description: A JSON object of student
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
        "404":
          description: Student not found
    delete:
      summary: Delete a student by ID.
      tags:
        - Student
      parameters:
        - in: path
          name: student_id
          required: true
          description: ID of the student to delete
          schema:
            type: string
      responses:
        "200":
          description: Student deleted successfully
        "404":
          description: Student not found

  /students/{student_id}/progress:
    get:
      summary: Returns the progress of a student.
      tags:
        - Student
      parameters:
        - in: path
          name: student_id
          required: true
          description: ID of the student whose progress is to be returned
          schema:
            type: string
      responses:
        "200":
          description: The current exercise number of the student
          content:
            application/json:
              schema:
                type: integer
        "404":
          description: Student not found
    post:
      summary: Updates the progress of a student.
      tags:
        - Student
      parameters:
        - in: path
          name: student_id
          required: true
          description: ID of the student whose progress is to be updated
          schema:
            type: string
      requestBody:
        description: The progress data to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_exercise:
                  type: integer
      responses:
        "200":
          description: Current exercise updated successfully
        "400":
          description: No data provided / current_exercise is required / current_exercise must be an integer
        "404":
          description: Student not found

  /students/{student_id}/help:
    get:
      summary: Returns the help status of a student.
      tags:
        - Student
      parameters:
        - in: path
          name: student_id
          required: true
          description: ID of the student whose help status is to be returned
          schema:
            type: string
      responses:
        "200":
          description: The help status and table number of the student
          content:
            application/json:
              schema:
                type: object
                properties:
                  help_requested:
                    type: boolean
                  table:
                    type: string
        "404":
          description: Student not found
    post:
      summary: Toggles the help status of a student.
      tags:
        - Student
      parameters:
        - in: path
          name: student_id
          required: true
          description: ID of the student whose help status is to be toggled
          schema:
            type: string
      responses:
        "200":
          description: Help requested updated successfully
        "404":
          description: Student not found

  /course:
    get:
      summary: Returns list of all courses.
      tags:
        - Course
      responses:
        "200":
          description: A JSON array of course objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Course"
    post:
      summary: Add a new course.
      tags:
        - Course
      requestBody:
        description: The course to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
      responses:
        "201":
          description: Course added successfully
        "400":
          description: Course with this ID already exists
        "404":
          description: Professor or Classroom not found

  /course/{course_id}:
    get:
      summary: Returns a course by ID.
      tags:
        - Course
      parameters:
        - in: path
          name: course_id
          required: true
          description: ID of the course to return
          schema:
            type: string
      responses:
        "200":
          description: A JSON object of course
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        "404":
          description: Course not found
    put:
      summary: Update a course by ID.
      tags:
        - Course
      parameters:
        - in: path
          name: course_id
          required: true
          description: ID of the course to update
          schema:
            type: string
      requestBody:
        description: The course data to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                classroom:
                  type: string
      responses:
        "200":
          description: Course updated successfully
        "400":
          description: Only name, description and classroom can be modified / No data provided
        "404":
          description: Course or Classroom not found
    delete:
      summary: Delete a course by ID.
      tags:
        - Course
      parameters:
        - in: path
          name: course_id
          required: true
          description: ID of the course to delete
          schema:
            type: string
      responses:
        "200":
          description: Course deleted successfully
        "404":
          description: Course not found

  /course/{course_id}/exercise:
    get:
      summary: Returns all exercises for a course.
      tags:
        - Course
      parameters:
        - in: path
          name: course_id
          required: true
          description: ID of the course to return exercises for
          schema:
            type: string
      responses:
        "200":
          description: A JSON array of exercise objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Exercise"
        "404":
          description: Course not found or no exercises available
    post:
      summary: Add a new exercise to a course.
      tags:
        - Course
      parameters:
        - in: path
          name: course_id
          required: true
          description: ID of the course to add the exercise to
          schema:
            type: string
      requestBody:
        description: The exercise to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Exercise"
      responses:
        "201":
          description: Exercise added successfully
        "400":
          description: An exercise with this ID already exists
        "404":
          description: Course not found

  /course/{course_id}/exercise/{exercise_id}:
    get:
      summary: Returns all subexercises for an exercise.
      tags:
        - Course
      parameters:
        - in: path
          name: course_id
          required: true
          description: ID of the course
          schema:
            type: string
        - in: path
          name: exercise_id
          required: true
          description: ID of the exercise to return subexercises for
          schema:
            type: string
      responses:
        "200":
          description: A JSON array of subexercise objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SubExercise"
        "404":
          description: Course or Exercise not found
    post:
      summary: Add a new subexercise to an exercise.
      tags:
        - Course
      parameters:
        - in: path
          name: course_id
          required: true
          description: ID of the course
          schema:
            type: string
        - in: path
          name: exercise_id
          required: true
          description: ID of the exercise to add the subexercise to
          schema:
            type: string
      requestBody:
        description: The subexercise to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubExercise"
      responses:
        "201":
          description: Subexercise added successfully
        "400":
          description: Subexercise with this ID already exists
        "404":
          description: Course or Exercise not found
    put:
      summary: Update an exercise by ID.
      tags:
        - Course
      parameters:
        - in: path
          name: course_id
          required: true
          description: ID of the course to update the exercise in
          schema:
            type: string
        - in: path
          name: exercise_id
          required: true
          description: ID of the exercise to update
          schema:
            type: string
      requestBody:
        description: The exercise data to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        "200":
          description: Exercise updated successfully
        "400":
          description: Only name and description can be modified / No data provided / No valid fields provided for update
        "404":
          description: Course or Exercise not found
    delete:
      summary: Delete an exercise by ID.
      tags:
        - Course
      parameters:
        - in: path
          name: course_id
          required: true
          description: ID of the course to delete the exercise from
          schema:
            type: string
        - in: path
          name: exercise_id
          required: true
          description: ID of the exercise to delete
          schema:
            type: string
      responses:
        "200":
          description: Exercise deleted successfully
        "404":
          description: Course or Exercise not found

  /course/{course_id}/exercise/{exercise_id}/students:
    get:
      summary: Returns all students for an exercise in a course.
      tags:
        - Course
      parameters:
        - in: path
          name: course_id
          required: true
          description: ID of the course to return students for
          schema:
            type: string
        - in: path
          name: exercise_id
          required: true
          description: ID of the exercise to return students for
          schema:
            type: string
      responses:
        "200":
          description: A JSON array of student objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Student"
        "404":
          description: Course or Exercise not found
    delete:
      summary: Delete all students for an exercise in a course.
      tags:
        - Course
      parameters:
        - in: path
          name: course_id
          required: true
          description: ID of the course to delete students from
          schema:
            type: string
        - in: path
          name: exercise_id
          required: true
          description: ID of the exercise to delete students from
          schema:
            type: string
      responses:
        "200":
          description: Students in course deleted successfully
        "404":
          description: Course or Exercise not found

  /course/{course_id}/exercise/{exercise_id}/start:
    post:
      summary: Start an exercise in a course.
      tags:
        - Course
      parameters:
        - in: path
          name: course_id
          required: true
          description: ID of the course to start the exercise in
          schema:
            type: string
        - in: path
          name: exercise_id
          required: true
          description: ID of the exercise to start
          schema:
            type: string
      responses:
        "200":
          description: Course started successfully
        "404":
          description: Course or Exercise not found

  /course/{course_id}/exercise/{exercise_id}/close:
    post:
      summary: Close an exercise in a course.
      tags:
        - Course
      parameters:
        - in: path
          name: course_id
          required: true
          description: ID of the course to close the exercise in
          schema:
            type: string
        - in: path
          name: exercise_id
          required: true
          description: ID of the exercise to close
          schema:
            type: string
      responses:
        "200":
          description: Course closed successfully
        "404":
          description: Course or Exercise not found

  /course/{course_id}/exercise/{exercise_id}/{subexercise_id}:
    delete:
      summary: Delete a subexercise by ID.
      tags:
        - Course
      parameters:
        - in: path
          name: course_id
          required: true
          description: ID of the course to delete the subexercise from
          schema:
            type: string
        - in: path
          name: exercise_id
          required: true
          description: ID of the exercise to delete the subexercise from
          schema:
            type: string
        - in: path
          name: subexercise_id
          required: true
          description: ID of the subexercise to delete
          schema:
            type: string
      responses:
        "200":
          description: SubExercise deleted successfully
        "404":
          description: Course, Exercise, or Subexercise not found
    put:
      summary: Update a subexercise by ID.
      tags:
        - Course
      parameters:
        - in: path
          name: course_id
          required: true
          description: ID of the course to update the subexercise in
          schema:
            type: string
        - in: path
          name: exercise_id
          required: true
          description: ID of the exercise to update the subexercise in
          schema:
            type: string
        - in: path
          name: subexercise_id
          required: true
          description: ID of the subexercise to update
          schema:
            type: string
      requestBody:
        description: The subexercise data to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        "200":
          description: SubExercise updated successfully
        "400":
          description: Only name and description can be modified / No valid fields provided for update
        "404":
          description: Course, Exercise, or Subexercise not found

components:
  schemas:
    Student:
      type: object
      properties:
        id:
          type: string
        table:
          type: string
        course:
          type: string
        exercise:
          type: string
        current_exercise:
          type: integer
        help_requested:
          type: boolean
      required:
        - id
        - table
        - course
        - exercise
      example:
        id: "Albert"
        table: "1-L"
        course: "Softwarequalitätssicherung"
        exercise: "Aufgabe 1"
        current_exercise: 0
        help_requested: false

    Classroom:
      type: object
      properties:
        id:
          type: string
        tablesPerRow:
          type: integer
        rows:
          type: integer
        tables:
          type: array
          items:
            $ref: "#/components/schemas/Table"
      required:
        - id
        - tablesPerRow
        - rows
        - tables
      example:
        id: "O-201"
        tablesPerRow: 4
        rows: 5
        tables:
          - id: 1
            occupied_left: false
            occupied_right: true

    Table:
      type: object
      properties:
        id:
          type: integer
        occupied_left:
          type: boolean
        occupied_right:
          type: boolean
      required:
        - id
        - occupied_left
        - occupied_right
      example:
        id: 1
        occupied_left: false
        occupied_right: true

    Professor:
      type: object
      properties:
        id:
          type: string
          description: email
        password:
          type: string
        lastName:
          type: string
        firstName:
          type: string
      required:
        - id
      example:
        id: "john.doe@example.com"
        lastName: "Doe"
        firstName: "John"

    Course:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        exercises:
          type: array
          items:
            $ref: "#/components/schemas/Exercise"
        classroom:
          type: string
        professor:
          type: string
      required:
        - name
        - description
        - classroom
        - professor
      example:
        name: "Softwarequalitätssicherung"
        description: "Grundlagen der Softwarequalitätssicherung"
        classroom: "O-201"
        professor: "professor@example.com"

    Exercise:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        exercises:
          type: array
          items:
            $ref: "#/components/schemas/SubExercise"
        participants:
          type: array
          items:
            type: string
        is_active:
          type: boolean
      required:
        - name
        - description
      example:
        name: "Aufgabe 1"
        description: "API Testing"
        exercises:
          - name: "Schritt 1"
            description: "Installieren Sie Postman"
        participants:
          - "Albert"
          - "Olaf"
        is_active: true

    SubExercise:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
      required:
        - name
        - description
      example:
        id: "step-1"
        name: "Schritt 1"
        description: "Installieren Sie Postman"